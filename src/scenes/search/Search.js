import React, { useState, useCallback, useMemo, useRef } from "react";
import { View, Text, StyleSheet, ScrollView } from "react-native";
import { colors, fontSize } from "../../theme";
import ScreenTemplate from "../../components/ScreenTemplate";
import Button from "../../components/Button";
import { useNavigation } from "@react-navigation/native";
import Dialog from "react-native-dialog";
import AwesomeModal from "./AwesomeModal";
import BottomSheet from '@gorhom/bottom-sheet';

export default function Search() {
  const navigation = useNavigation()
  const [visible, setVisible] = useState(false);
  const [input, setInput] = useState('')
  const [isModalVisible, setIsModalVisible] = useState(false)
  const [sheetPosition, setSheetPosition] = useState(0)
  const bottomSheetRef = useRef(null);
  const snapPoints = useMemo(() => ['1%', '25%', '50%', '75%'], []);

  const handleSheetChanges = useCallback((index) => {
    setSheetPosition(index)
  }, []);

  const onButtonPress = () => {
    navigation.navigate('Sneakers')
  }

  const onGoMapPress = () => {
    navigation.navigate('Map')
  }

  const onUsersPress = () => {
    navigation.navigate('Users')
  }

  const onDatePress = () => {
    navigation.navigate('Date')
  }

  const onInputBoxPress = () => {
    setVisible(true);
  }

  const handleCancel = () => {
    setVisible(false);
    setInput('')
  };

  const onOkPress = () => {
    console.log(`ÂÖ•Âäõ„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà: ${input}`)
    setVisible(false)
    setInput('')
  }

  const handleTextChange = (inputText) => {
    setInput(inputText)
  }

  return (
    <ScreenTemplate>
      <ScrollView style={styles.container}>
        <View style={styles.buttonContainer}>
          <Button
            label='„Çπ„Éã„Éº„Ç´„Éº‰∏ÄË¶ß„Å∏'
            onPress={onButtonPress}
            color={colors.purple}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='„Éû„ÉÉ„ÉóÁîªÈù¢„Å∏'
            onPress={onGoMapPress}
            color={colors.bluePrimary}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='„É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„Å∏'
            onPress={onUsersPress}
            color={colors.pink}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='Êó•‰ªòÁîªÈù¢„Å∏'
            onPress={onDatePress}
            color={colors.grayPrimary}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='ÂÖ•Âäõ„Éú„ÉÉ„ÇØ„Çπ„ÇíË°®Á§∫'
            onPress={onInputBoxPress}
            color={colors.lightPurple}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='Ë®ò‰∫ã‰∏ÄË¶ß„Å∏'
            onPress={() => navigation.navigate('Articles')}
            color={colors.blueSecondary}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='„É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè'
            onPress={() => setIsModalVisible(true)}
            color={colors.redSecondary}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='ÁîªÂÉèÁîüÊàêÁîªÈù¢„Å∏'
            onPress={() => navigation.navigate('ImageGenerate')}
            color={colors.bluePrimary}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='„Éà„Éº„ÇØÁîªÈù¢„Å∏'
            onPress={() => navigation.navigate('Talk')}
            color={colors.blueSecondary}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='„ÉÅ„É£„ÉÉ„ÉàÁîªÈù¢„Å∏'
            onPress={() => navigation.navigate('Chat')}
            color={colors.darkPurple}
            disable={false}
            labelColor={colors.white}
            labelBold={false}
          />
          <View style={{paddingVertical: 10}} />
          <Button
            label='„Éú„Éà„É†„Ç∑„Éº„ÉàÈñã„Åè'
            onPress={() => setSheetPosition(2)}
            color={colors.yellowPrimary}
            disable={false}
            labelColor={colors.black}
            labelBold={false}
          />
        </View>
      </ScrollView>
      <AwesomeModal
        isModalVisible={isModalVisible}
        setIsModalVisible={setIsModalVisible}
      />
      <BottomSheet
        ref={bottomSheetRef}
        index={sheetPosition}
        snapPoints={snapPoints}
        onChange={handleSheetChanges}
      >
        <View style={styles.contentContainer}>
          <Text>Awesome üéâ</Text>
        </View>
      </BottomSheet>
      <Dialog.Container visible={visible}>
        <Dialog.Title>ÂÖ•Âäõ</Dialog.Title>
        <Dialog.Description>
          ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
        </Dialog.Description>
        <Dialog.Input
          placeholder="ÂÖ•ÂäõÊ¨Ñ„Åß„Åô"
          onChangeText={handleTextChange}
          value={input}
          inputMode='email'
          keyboardType='email-address'
        />
        <Dialog.Button label="„Ç≠„É£„É≥„Çª„É´" onPress={handleCancel} />
        {input.length >= 4?
          <Dialog.Button label="Ê±∫ÂÆö" onPress={onOkPress} />
          :null
        }
      </Dialog.Container>
    </ScreenTemplate>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  title: {
    fontSize: fontSize.xxxLarge
  },
  buttonContainer: {
    width: '100%',
    paddingHorizontal: 20,
    paddingVertical: 20
  }
})